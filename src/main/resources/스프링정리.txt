- 스프링 : 자바 프레임 워크
    - 프레임 워크 : 여러 기능을 가진 클래스와 라이브러리가 합쳐진 형태/틀
    - https://spring.io
- 스프링 셋팅
    - 인텔리제이 무료버전(커뮤니티) 스프링프로젝트 지원 안함
    - 수업기준 : 그레이들 프로젝트
        - 그레이들 [ 자동(라이브러리) 빌드 ]
    - 그레이들에 빌드할 의존성(라이브러리) 추가 [ https://start.spring.io/ ]
        Gradle - Groovy
        Java
            Spring Boot [ 2.7.16 ]
        Java8
    - Dependencies
        Spring Web : 스프링 웹 관련 라이브러리들을 지원
        Lombok : 롬복 [ 생성자, getter, setter, 빌더패턴 등등 ] 라이브러리
        MySQL Driver : mysql 연동 라이브러리
        < 추후에 계속적으로 추가 >

    - build.grable에 Dependencies 추가

- 프로젝트 폴더구성
    프로젝트명
        .gradle : build.gradle 파일 [임시파일]
        .idea : 인텔리제이 셋팅 파일 [임시파일]
        build : JVM 빌드 시 생성한 바이트파일 [임시파일]
        gradle : gradle 라이브러리 파일
        ****src : 개발자 코드 작성하는 공간
            main
                    java        : 백엔드
                    resources   : 프론트엔드 [정적파일(html,css,js,img 등등)]
        ****build.gradle : 라이브러리 자동 빌드 해주는 작성 코드 파일

- 스프링 실행
    준비물
    - main 함수 1개 필요 [ 스프링을 작동할 스레드 1개 필요 ]
    1. 클래스 1개 생성 [ 스프링 실행 하는 클래스 이므로 모든 소스 파일의 최상위 위치 ]
    2. 클래스 상단
        @SpringBootApplication 주입
    3. main 선언
        SpringApplication.run(현재 클래스명.class);

- 어노테이션
1. 스프링
    @SpringBootApplication      스프링부트 실행 관련 제공
    @ServletComponentScan       서블릿을 찾아서 빈 등록
    @Autowired                  컨테이너에서 빈 찾아서 객체 주입
2. MVC
    @Controller                 해당 클래스를 controller 사용 주입 [ 컨테이너 빈 등록 ]
    @RestController             해당 클래스를 controller 사용 주입 [ 컨테이너 빈 등록 ] + @ResponseBody
    @ResponseBody               해당 Mapping 함수들의 response반환타입을 자동으로 설정
    @RequestMapping             해당 함수/클래스를 매핑
    @GetMapping                 HTTP 요청 GET 함수 매핑
    @PostMapping                HTTP 요청 POST 함수 매핑
    @PutMapping                 HTTP 요청 PUT 함수 매핑
    @DeleteMapping              HTTP 요청 DELETE 함수 매핑
    @Service                    해당 클래스를 service 사용 주입 [ 컨테이너에 빈 등록 ]
    @Component                  해당 클래스 컨테이너에 빈 등록
        @RequestParam           쿼리스트링 형식의 요청 매개변수 매핑                URL?매개변수=값?매개변수=값
        @RequestBody            HTTP body 형식의 요청 매개변수를 객체로 매핑
        @ModelAttribute         쿼리스트링 형식의 요청 매개변수를 객체로 매핑
        @PathVariable           경로상의 매개변수 형식의 요청 매개변수 매핑            URL/값/값
3. 롬복
    @NoArgsConstructor          빈 생성자 자동 생성
    @AllArgsConstructor         풀 생성자 자동 생성
    @Getter @Setter             Getter, Setter 자동 생성
    @ToString                   ToString 자동 생성
    @Builder                    빌더 패턴 [ 유연 하게 (생성자 단점 보안) 객체 생성 도와 주는 함수 제공 ]
4. JPA

- HTML 반환
    return new ClassPathResource("templates/todo.html");